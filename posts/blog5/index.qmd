```{python}
# Import Libary
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
```

```{python}

from sklearn.ensemble import IsolationForest
from sklearn.neighbors import KernelDensity
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import RocCurveDisplay, auc, roc_curve, precision_recall_fscore_support


figsize = (9, 3)
```

```{python}
datasets = pd.read_csv('thyroid.csv', delimiter=';')
datasets
```

```{python}
datasets = datasets.drop(["Unnamed: 22", "Unnamed: 23"], axis=1)
```

```{python}
datasets.head()
```

```{python}
datasets = pd.read_csv('thyroid.csv', delimiter=';')
datasets
```

```{python}
datasets["Outlier_label "] = datasets["Outlier_label "].astype("category").cat.codes
```

```{python}
datasets.describe()
```

```{python}
datasets.info
```

```{python}
#cols_to_norm = ['TSH','T3_measured', 'TT4_measured', 'T4U_measured', 'FTI_measured']
#df[cols_to_norm] = df[cols_to_norm].apply(lambda x: (x - x.mean()) / x.std())
tmp_labels = datasets['Outlier_label ']
datasets = datasets.drop(['Outlier_label '], axis=1)
datasets = (datasets-datasets.mean())/datasets.std()
datasets['Outlier_label '] = tmp_labels
```

```{python}
corr = datasets.corr()
sns.heatmap(corr)
```

```{python}
print(corr['Outlier_label '])
```

```{python}
value_counts = datasets['Outlier_label '].value_counts()
normal = value_counts.index[0]
outlier = value_counts.index[1]
```

```{python}
g = sns.pairplot(datasets, kind='scatter', diag_kind='hist', hue='Outlier_label ', x_vars=datasets.columns[16:-1], y_vars='Outlier_label ')
g.fig.set_size_inches(15, 3)
plt.show()
```

```{python}
f, ax = plt.subplots(figsize=figsize)
ax = sns.boxplot(data=datasets[['Age', 'hypopituitary']])  
plt.show()
```

```{python}
x = datasets.drop(['Outlier_label '], axis=1)
y = datasets['Outlier_label ']
```

Isolation Forest

```{python}
params = {'n_estimators': list(range(5, 15)), 'max_features': list(range(2, 10))}
oif = GridSearchCV(IsolationForest(n_jobs=2, random_state=5), params, scoring='homogeneity_score', cv=5)
oif.fit(x, y)
preds_oif = oif.predict(x)
preds_oif[preds_oif==1] = normal
preds_oif[preds_oif==-1] = outlier
print(oif.best_params_)
```

```{python}
fpr, tpr, _ = roc_curve(y, preds_oif)
roc_auc = auc(fpr, tpr)
rcd = RocCurveDisplay(fpr=fpr, tpr=tpr, roc_auc=roc_auc)
rcd.plot()
```


```{python}
prec, rec, f1, _ = precision_recall_fscore_support(y, preds_oif, average='macro')
print(f'\tF1-score: {f1}')
print(f'\tPrecision: {prec}')
print(f'\tRecall: {rec}')

```

KDE
Estimating optimal bandwidth


```{python}
params = {'kernel': ['gaussian', 'exponential'], 'bandwidth': np.linspace(0.008, 0.09, 10)}
opt = GridSearchCV(KernelDensity(), params, cv=5)
opt.fit(x)
opt.best_params_
```


not running

```{python}
h = opt.best_params_['bandwidth']
k = opt.best_params_['kernel']
kde = KernelDensity(kernel=k, bandwidth=h)
kde.fit(x)
ldens = kde.score_samples(x)
signal_kde = pd.Series(index=x.index, data=-ldens)
plot_signal(signal_kde, y, figsize=figsize)
```

```{python}
# Map labels to 0 and 1 
datasets['Outlier_label '] = datasets['Outlier_label '].map({'n': 0, 'o': 1})
```


```{python}
datasets['Outlier_label '].value_counts() / len(datasets)
```