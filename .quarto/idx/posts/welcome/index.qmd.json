{"title":"Import Libary","markdown":{"yaml":{},"headingText":"Import Libary","containsRefs":false,"markdown":"\n\nThis is my 1st blog. Welcome!\n\n![](thumbnail.jpg)\n\nSince this post doesn't specify an explicit `image`, the first image in the post will be used in the listing page of posts.\n\nMethod 1:\n\n```{python}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Download and prepare the data\ndf=pd.read_csv(\"headbrain.csv\")\n\ndf.head()\n\n```\n\n```{python}\n# Import Libary\nprint(df.isnull().sum())\n\n\t\n# Declare dependent variable(Y) and independent variable(X)\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n\n```\n\n```{python}\ndf.info()\n\n```\n\n```{python}\n\ndf.shape\n```\n\n```{python}\nX.shape\n```\n\n\n```{python}\n\nY.shape\n\n```\n\n```{python}\nnp.corrcoef(X, Y)\n\n```\n\n\n```{python}\n# Plot the Input Data\nplt.scatter(X, Y, c='green', label='Data points')\nplt.xlabel('Head Size in cm3')\nplt.ylabel('Brain Weight in grams')\nplt.legend()\nplt.show()\n```\n\n\n\n```{python}\n# Plot the Input Data\n# Calculating coefficient\n\n# Mean X and Y\nmean_x = np.mean(X)\nmean_y = np.mean(Y)\n\n# Total number of values\nn = len(X)\n\n# Using the formula to calculate theta1 and theta2\nnumer = 0\ndenom = 0\nfor i in range(n):\n    numer += (X[i] - mean_x) * (Y[i] - mean_y)\n    denom += (X[i] - mean_x) ** 2\nb1 = numer / denom\nb0 = mean_y - (b1 * mean_x)\n\n# Printing coefficients\nprint(\"coefficients for regression\",b1, b0)\n```\n\n```{python}\n# Plotting Values and Regression Line\n%matplotlib inline\n\nplt.rcParams['figure.figsize'] = (10.0, 5.0)\n# max_x = np.max(X) + 100\n# min_x = np.min(X) - 100\n\ny = b0 + b1 * X\n\n# Ploting Line\nplt.plot(X, y, color='blue', label='Regression Line')\n# Ploting Scatter Points\nplt.scatter(X, Y, c='green', label='Scatter data')\n\nplt.xlabel('Head Size in cm3')\nplt.ylabel('Brain Weight in grams')\nplt.legend()\nplt.show()\n```\n\n```{python}\n# Calculating Root Mean Squares Error\nrmse = 0\nfor i in range(n):\n    y_pred = b0 + b1 * X[i]\n    rmse += (Y[i] - y_pred) ** 2\n    \nrmse = np.sqrt(rmse/n)\nprint(\"Root Mean Square Error is\",rmse)\n```\n\n```{python}\n# Calculating R2 Score\nss_tot = 0\nss_res = 0\nfor i in range(n):\n    y_pred = b0 + b1 * X[i]\n    ss_tot += (Y[i] - mean_y) ** 2\n    ss_res += (Y[i] - y_pred) ** 2\nr2 = 1 - (ss_res/ss_tot)\nprint(\"R2 Score\",r2)\n```\n\n\nMethod 2:\n\n```{python}\n# Import necessary libraries\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv('headbrain.csv')\n\n# Explore the dataset\ndf.head()\n```\n\n```{python}\nprint(data.isnull().sum())\n\n```\n\n\n\n```{python}\nmean_x = np.mean(X)\nmean_y = np.mean(Y)\n\n#Total number of Values\nn = len(X)\n\n```\n\n```{python}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nX = X.reshape((n,1))\n\n```\n\n```{python}\nmodel = LinearRegression()\n```\n\n```{python}\nmodel = model.fit(X,Y)\n```\n\n```{python}\nr2 = model.score(X,Y)\nprint('R^2 value: ',r2)\n```\n\n```{python}\nY_pred = model.predict(X)\n\n```\n\nMethod 2b\n\n```{python}\nfrom sklearn.model_selection import train_test_split\n\nX = df[['Head Size(cm^3)']]  # Select relevant features\ny = df['Brain Weight(grams)']  # Define the target variable\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n```\n\n```{python}\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nmodel = LinearRegression() # Create a linear regression model\n\nmodel.fit(X_train, y_train) # Fit the model to the training data\n\n```\n\n```{python}\ny_pred = model.predict(X_test)\n```\n\n```{python}\n\nplt.scatter(y_test, y_pred) # Scatter plot to visualize actual vs. predicted values\n\nplt.xlabel(\"Actual Sale Prices\")\nplt.ylabel(\"Predicted Sale Prices\")\nplt.title(\"Actual Sale Prices vs. Predicted Sale Prices\")\nplt.show()\n```\n\n```{python}\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Calculate Mean Squared Error (MSE)\nmse = mean_squared_error(y_test, y_pred)\n\n# Calculate R-squared (R²) score\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"Mean Squared Error (MSE): {mse:.2f}\")\nprint(f\"R-squared (R²) Score: {r2:.2f}\")\n```\n\n\n\n2. Non-Linear Regression\n\n```{python}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read in our Data Set\ndf = pd.read_csv(\"headbrain.csv\")\n```\n\n```{python}\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n```\n\n\n```{python}\nfrom sklearn.preprocessing import PolynomialFeatures\npolynomial_converter = PolynomialFeatures(degree=2,include_bias=False)\n# Converter \"fits\" to data, in this case, reads in every X column\n# Then it \"transforms\" and ouputs the new polynomial data\npoly_features = polynomial_converter.fit_transform(X)\npoly_features.shape\n```\n\n```{python}\nfrom sklearn.model_selection import train_test_split\n# random_state:\n# https://stackoverflow.com/questions/28064634/random-state-pseudo-random-number-in-scikit-learn\nX_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n```\n\n```{python}\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression(fit_intercept=True)\nmodel.fit(X_train,y_train)\n```\n\n```{python}\ntest_predictions = model.predict(X_test)\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nMAE = mean_absolute_error(y_test,test_predictions)\nMSE = mean_squared_error(y_test,test_predictions)\nRMSE = np.sqrt(MSE)\n```\n\n```{python}\n# TRAINING ERROR PER DEGREE\ntrain_rmse_errors = []\n# TEST ERROR PER DEGREE\ntest_rmse_errors = []\n\nfor d in range(1,10):\n\n    # CREATE POLY DATA SET FOR DEGREE \"d\"\n    polynomial_converter = PolynomialFeatures(degree=d,include_bias=False)\n    poly_features = polynomial_converter.fit_transform(X)\n\n    # SPLIT THIS NEW POLY DATA SET\n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n\n    # TRAIN ON THIS NEW POLY SET\n    model = LinearRegression(fit_intercept=True)\n    model.fit(X_train,y_train)\n\n    # PREDICT ON BOTH TRAIN AND TEST\n    train_pred = model.predict(X_train)\n    test_pred = model.predict(X_test)\n\n    # Calculate Errors\n\n    # Errors on Train Set\n    train_RMSE = np.sqrt(mean_squared_error(y_train,train_pred))\n\n    # Errors on Test Set\n    test_RMSE = np.sqrt(mean_squared_error(y_test,test_pred))\n\n    # Append errors to lists for plotting later\n\n\n    train_rmse_errors.append(train_RMSE)\n    test_rmse_errors.append(test_RMSE)\n```\n\n```{python}\nplt.plot(range(1,6),train_rmse_errors[:5],label='TRAIN')\nplt.plot(range(1,6),test_rmse_errors[:5],label='TEST')\nplt.xlabel(\"Polynomial Complexity\")\nplt.ylabel(\"RMSE\")\nplt.legend()\n```\n\n```{python}\n# Based on our chart, could have also been degree=4, but\n# it is better to be on the safe side of complexity\nfinal_poly_converter = PolynomialFeatures(degree=3,include_bias=False)\nfinal_model = LinearRegression()\nfinal_model.fit(final_poly_converter.fit_transform(X),y)\n\nfrom joblib import dump, load\ndump(final_model, 'sales_poly_model.joblib')\ndump(final_poly_converter,'poly_converter.joblib')\n\n\nloaded_poly = load('poly_converter.joblib')\nloaded_model = load('sales_poly_model.joblib')\ncampaign = [[149,22,12]]\ncampaign_poly = loaded_poly.transform(campaign)\ncampaign_poly\n\nfinal_model.predict(campaign_poly)\n```\n\n```{python}\n\n```\n\n```{python}\n\n```\n\n\nCheck with TA\n\n```{python}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#define predictor and response variables\nx = np.array([2, 3, 4, 5, 6, 7, 7, 8, 9, 11, 12])\ny = np.array([18, 16, 15, 17, 20, 23, 25, 28, 31, 30, 29])\n\n#create scatterplot to visualize relationship between x and y\nplt.scatter(x, y)\n```\n\n```{python}\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\n#specify degree of 3 for polynomial regression model\n#include bias=False means don't force y-intercept to equal zero\npoly = PolynomialFeatures(degree=3, include_bias=False)\n\n#reshape data to work properly with sklearn\npoly_features = poly.fit_transform(x.reshape(-1, 1))\n\n#fit polynomial regression model\npoly_reg_model = LinearRegression()\npoly_reg_model.fit(poly_features, y)\n\n#display model coefficients\nprint(poly_reg_model.intercept_, poly_reg_model.coef_)\n```\n\n```{python}\n#use model to make predictions on response variable\ny_predicted = poly_reg_model.predict(poly_features)\n\n#create scatterplot of x vs. y\nplt.scatter(x, y)\n\n#add line to show fitted polynomial regression model\nplt.plot(x, y_predicted, color='purple')\n```\n\n\nTry non-linear on headbrain\n\n```{python}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n#from sklearn.linear_model import LinearRegression\n\n# Download and prepare the data\ndf=pd.read_csv(\"headbrain.csv\")\n\ndf.head()\n```\n\n```{python}\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n```\n\n```{python}\n\n\n# Fitting Polynomial Regression to the dataset\nfrom sklearn.preprocessing import PolynomialFeatures\nX=X.reshape(-1,1)\nY=Y.reshape(-1,1)\npoly = PolynomialFeatures(degree=4)\nX_poly = poly.fit_transform(X)\n \npoly.fit(X_poly, Y)\nlin2 = LinearRegression()\n\n\nlin2.fit(X_poly, Y)\n```\n\n```{python}\n\n\n\n# Visualising the Polynomial Regression results\nplt.scatter(X, Y, color='blue')\n \nplt.plot(X, lin2.predict(poly.fit_transform(X)),\n         color='red')\nplt.title('Polynomial Regression')\nplt.xlabel('Head')\nplt.ylabel('Brain')\n \nplt.show()\n```\n\n```{python}\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n```\n\n```{python}\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n```","srcMarkdownNoYaml":"\n\nThis is my 1st blog. Welcome!\n\n![](thumbnail.jpg)\n\nSince this post doesn't specify an explicit `image`, the first image in the post will be used in the listing page of posts.\n\nMethod 1:\n\n```{python}\n# Import Libary\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Download and prepare the data\ndf=pd.read_csv(\"headbrain.csv\")\n\ndf.head()\n\n```\n\n```{python}\n# Import Libary\nprint(df.isnull().sum())\n\n\t\n# Declare dependent variable(Y) and independent variable(X)\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n\n```\n\n```{python}\ndf.info()\n\n```\n\n```{python}\n\ndf.shape\n```\n\n```{python}\nX.shape\n```\n\n\n```{python}\n\nY.shape\n\n```\n\n```{python}\nnp.corrcoef(X, Y)\n\n```\n\n\n```{python}\n# Plot the Input Data\nplt.scatter(X, Y, c='green', label='Data points')\nplt.xlabel('Head Size in cm3')\nplt.ylabel('Brain Weight in grams')\nplt.legend()\nplt.show()\n```\n\n\n\n```{python}\n# Plot the Input Data\n# Calculating coefficient\n\n# Mean X and Y\nmean_x = np.mean(X)\nmean_y = np.mean(Y)\n\n# Total number of values\nn = len(X)\n\n# Using the formula to calculate theta1 and theta2\nnumer = 0\ndenom = 0\nfor i in range(n):\n    numer += (X[i] - mean_x) * (Y[i] - mean_y)\n    denom += (X[i] - mean_x) ** 2\nb1 = numer / denom\nb0 = mean_y - (b1 * mean_x)\n\n# Printing coefficients\nprint(\"coefficients for regression\",b1, b0)\n```\n\n```{python}\n# Plotting Values and Regression Line\n%matplotlib inline\n\nplt.rcParams['figure.figsize'] = (10.0, 5.0)\n# max_x = np.max(X) + 100\n# min_x = np.min(X) - 100\n\ny = b0 + b1 * X\n\n# Ploting Line\nplt.plot(X, y, color='blue', label='Regression Line')\n# Ploting Scatter Points\nplt.scatter(X, Y, c='green', label='Scatter data')\n\nplt.xlabel('Head Size in cm3')\nplt.ylabel('Brain Weight in grams')\nplt.legend()\nplt.show()\n```\n\n```{python}\n# Calculating Root Mean Squares Error\nrmse = 0\nfor i in range(n):\n    y_pred = b0 + b1 * X[i]\n    rmse += (Y[i] - y_pred) ** 2\n    \nrmse = np.sqrt(rmse/n)\nprint(\"Root Mean Square Error is\",rmse)\n```\n\n```{python}\n# Calculating R2 Score\nss_tot = 0\nss_res = 0\nfor i in range(n):\n    y_pred = b0 + b1 * X[i]\n    ss_tot += (Y[i] - mean_y) ** 2\n    ss_res += (Y[i] - y_pred) ** 2\nr2 = 1 - (ss_res/ss_tot)\nprint(\"R2 Score\",r2)\n```\n\n\nMethod 2:\n\n```{python}\n# Import necessary libraries\nimport pandas as pd\n\n# Load the dataset\ndf = pd.read_csv('headbrain.csv')\n\n# Explore the dataset\ndf.head()\n```\n\n```{python}\nprint(data.isnull().sum())\n\n```\n\n\n\n```{python}\nmean_x = np.mean(X)\nmean_y = np.mean(Y)\n\n#Total number of Values\nn = len(X)\n\n```\n\n```{python}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nX = X.reshape((n,1))\n\n```\n\n```{python}\nmodel = LinearRegression()\n```\n\n```{python}\nmodel = model.fit(X,Y)\n```\n\n```{python}\nr2 = model.score(X,Y)\nprint('R^2 value: ',r2)\n```\n\n```{python}\nY_pred = model.predict(X)\n\n```\n\nMethod 2b\n\n```{python}\nfrom sklearn.model_selection import train_test_split\n\nX = df[['Head Size(cm^3)']]  # Select relevant features\ny = df['Brain Weight(grams)']  # Define the target variable\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n```\n\n```{python}\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nmodel = LinearRegression() # Create a linear regression model\n\nmodel.fit(X_train, y_train) # Fit the model to the training data\n\n```\n\n```{python}\ny_pred = model.predict(X_test)\n```\n\n```{python}\n\nplt.scatter(y_test, y_pred) # Scatter plot to visualize actual vs. predicted values\n\nplt.xlabel(\"Actual Sale Prices\")\nplt.ylabel(\"Predicted Sale Prices\")\nplt.title(\"Actual Sale Prices vs. Predicted Sale Prices\")\nplt.show()\n```\n\n```{python}\n# Make predictions on the test set\ny_pred = model.predict(X_test)\n\n# Calculate Mean Squared Error (MSE)\nmse = mean_squared_error(y_test, y_pred)\n\n# Calculate R-squared (R²) score\nr2 = r2_score(y_test, y_pred)\n\nprint(f\"Mean Squared Error (MSE): {mse:.2f}\")\nprint(f\"R-squared (R²) Score: {r2:.2f}\")\n```\n\n\n\n2. Non-Linear Regression\n\n```{python}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Read in our Data Set\ndf = pd.read_csv(\"headbrain.csv\")\n```\n\n```{python}\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n```\n\n\n```{python}\nfrom sklearn.preprocessing import PolynomialFeatures\npolynomial_converter = PolynomialFeatures(degree=2,include_bias=False)\n# Converter \"fits\" to data, in this case, reads in every X column\n# Then it \"transforms\" and ouputs the new polynomial data\npoly_features = polynomial_converter.fit_transform(X)\npoly_features.shape\n```\n\n```{python}\nfrom sklearn.model_selection import train_test_split\n# random_state:\n# https://stackoverflow.com/questions/28064634/random-state-pseudo-random-number-in-scikit-learn\nX_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n```\n\n```{python}\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression(fit_intercept=True)\nmodel.fit(X_train,y_train)\n```\n\n```{python}\ntest_predictions = model.predict(X_test)\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nMAE = mean_absolute_error(y_test,test_predictions)\nMSE = mean_squared_error(y_test,test_predictions)\nRMSE = np.sqrt(MSE)\n```\n\n```{python}\n# TRAINING ERROR PER DEGREE\ntrain_rmse_errors = []\n# TEST ERROR PER DEGREE\ntest_rmse_errors = []\n\nfor d in range(1,10):\n\n    # CREATE POLY DATA SET FOR DEGREE \"d\"\n    polynomial_converter = PolynomialFeatures(degree=d,include_bias=False)\n    poly_features = polynomial_converter.fit_transform(X)\n\n    # SPLIT THIS NEW POLY DATA SET\n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n\n    # TRAIN ON THIS NEW POLY SET\n    model = LinearRegression(fit_intercept=True)\n    model.fit(X_train,y_train)\n\n    # PREDICT ON BOTH TRAIN AND TEST\n    train_pred = model.predict(X_train)\n    test_pred = model.predict(X_test)\n\n    # Calculate Errors\n\n    # Errors on Train Set\n    train_RMSE = np.sqrt(mean_squared_error(y_train,train_pred))\n\n    # Errors on Test Set\n    test_RMSE = np.sqrt(mean_squared_error(y_test,test_pred))\n\n    # Append errors to lists for plotting later\n\n\n    train_rmse_errors.append(train_RMSE)\n    test_rmse_errors.append(test_RMSE)\n```\n\n```{python}\nplt.plot(range(1,6),train_rmse_errors[:5],label='TRAIN')\nplt.plot(range(1,6),test_rmse_errors[:5],label='TEST')\nplt.xlabel(\"Polynomial Complexity\")\nplt.ylabel(\"RMSE\")\nplt.legend()\n```\n\n```{python}\n# Based on our chart, could have also been degree=4, but\n# it is better to be on the safe side of complexity\nfinal_poly_converter = PolynomialFeatures(degree=3,include_bias=False)\nfinal_model = LinearRegression()\nfinal_model.fit(final_poly_converter.fit_transform(X),y)\n\nfrom joblib import dump, load\ndump(final_model, 'sales_poly_model.joblib')\ndump(final_poly_converter,'poly_converter.joblib')\n\n\nloaded_poly = load('poly_converter.joblib')\nloaded_model = load('sales_poly_model.joblib')\ncampaign = [[149,22,12]]\ncampaign_poly = loaded_poly.transform(campaign)\ncampaign_poly\n\nfinal_model.predict(campaign_poly)\n```\n\n```{python}\n\n```\n\n```{python}\n\n```\n\n\nCheck with TA\n\n```{python}\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n#define predictor and response variables\nx = np.array([2, 3, 4, 5, 6, 7, 7, 8, 9, 11, 12])\ny = np.array([18, 16, 15, 17, 20, 23, 25, 28, 31, 30, 29])\n\n#create scatterplot to visualize relationship between x and y\nplt.scatter(x, y)\n```\n\n```{python}\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\n\n#specify degree of 3 for polynomial regression model\n#include bias=False means don't force y-intercept to equal zero\npoly = PolynomialFeatures(degree=3, include_bias=False)\n\n#reshape data to work properly with sklearn\npoly_features = poly.fit_transform(x.reshape(-1, 1))\n\n#fit polynomial regression model\npoly_reg_model = LinearRegression()\npoly_reg_model.fit(poly_features, y)\n\n#display model coefficients\nprint(poly_reg_model.intercept_, poly_reg_model.coef_)\n```\n\n```{python}\n#use model to make predictions on response variable\ny_predicted = poly_reg_model.predict(poly_features)\n\n#create scatterplot of x vs. y\nplt.scatter(x, y)\n\n#add line to show fitted polynomial regression model\nplt.plot(x, y_predicted, color='purple')\n```\n\n\nTry non-linear on headbrain\n\n```{python}\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n#from sklearn.linear_model import LinearRegression\n\n# Download and prepare the data\ndf=pd.read_csv(\"headbrain.csv\")\n\ndf.head()\n```\n\n```{python}\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n```\n\n```{python}\n\n\n# Fitting Polynomial Regression to the dataset\nfrom sklearn.preprocessing import PolynomialFeatures\nX=X.reshape(-1,1)\nY=Y.reshape(-1,1)\npoly = PolynomialFeatures(degree=4)\nX_poly = poly.fit_transform(X)\n \npoly.fit(X_poly, Y)\nlin2 = LinearRegression()\n\n\nlin2.fit(X_poly, Y)\n```\n\n```{python}\n\n\n\n# Visualising the Polynomial Regression results\nplt.scatter(X, Y, color='blue')\n \nplt.plot(X, lin2.predict(poly.fit_transform(X)),\n         color='red')\nplt.title('Polynomial Regression')\nplt.xlabel('Head')\nplt.ylabel('Brain')\n \nplt.show()\n```\n\n```{python}\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n```\n\n```{python}\n\nX=df['Head Size(cm^3)'].values\nY = df['Brain Weight(grams)'].values\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"cosmo","title-block-banner":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}